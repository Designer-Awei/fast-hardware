项目名称：Fast Hardware
---
项目目标
开发一个桌面端应用，旨在帮助硬件项目新手解决选型、电路搭建和固件编写等问题。该应用将利用 LLM API 实现以下核心功能：
1、自定义元件绘制：允许用户自定义硬件元件及其引脚。
2、功能需求反推硬件选型：根据用户输入的功能需求，由 LLM 推荐合适的硬件。
3、电路系统搭建示意：根据选定的硬件，LLM 生成可视化的电路搭建示意图。
4、固件代码生成：为已搭建的电路系统生成相应的固件代码。
---
技术栈
前端框架：Electron (桌面端应用)
UI 框架：React (前端 UI)
后端服务：Node.js (用于与 LLM API 交互)
LLM API：Siliconflow API
数据存储：JSON 文件 (用于存储元件库和电路系统)
绘图库：Canvas API 或 SVG 库 (用于画布绘图，例如 Konva.js, Paper.js)
---
核心功能模块
1. 主界面 (Main UI)
1）画布区 (Canvas)：
一个带有格点的画布，用于元件的拖拽、放置和连接。
支持元件（矩形主体 + 矩形引脚）的绘制和显示。
关键功能：当画布上的元件被拖动、旋转或修改连线后，用户点击保存（或 Ctrl+S）即可自动更新底层 JSON 数据。
2）对话栏 (Chatbox)：
用户与 LLM 对话的界面。
支持文本输入，用于描述功能需求或请求代码。
关键功能：LLM 可以通过预设函数（例如：add_component, move_component, rotate_component, edit_wiring）直接修改 JSON，并驱动画布重新渲染。

2. 元件库管理 (Component Library)
1）元件预览页：
以缩略图形式展示所有可用元件，包括自定义和预设元件。
2）元件绘制页：
一个独立的画布，用于用户自定义元件的形状和引脚。
用户可以定义引脚的数量、位置、名称和类型（如 VCC, GND, I/O）。

3. 数据结构
所有元件和电路系统都将以 JSON 格式存储，确保可导入和导出。

自定义元件库 JSON 结构：
所有自定义元件存储在一个 JSON 文件中。
文件前部包含一个列表，用于快速索引元件名称和 ID，以提高 LLM 访问效率。
每个元件（component）为一个独立的 JSON 对象。

// custom_components.json
{
  "list": [
    {"name": "Custom-Sensor-1", "id": "uuid-1"},
    {"name": "Custom-MCU-A", "id": "uuid-2"}
  ],
  "components": [
    {
      "name": "Custom-Sensor-1",
      "id": "uuid-1",
      "pins": {
        "side1": [
          {"pinName": "VCC", "type": "power", "order": 1},
          {"pinName": "GND", "type": "ground", "order": 2}
        ],
        "side3": [
          {"pinName": "Data", "type": "digital_io", "order": 1}
        ]
      }
    }
  ]
}

电路原型 JSON 结构：
该文件包含整个项目的信息，是画布状态的唯一数据来源。
单个元件不需要保存坐标、朝向等属性，这些属性仅存在于电路原型中。

// circuit_prototype.json
{
  "projectName": "My LED Project",
  "components": [
    {
      "componentId": "uuid-from-library",
      "instanceId": "instance-1",
      "orientation": "up", // 朝向：up, down, left, right
      "position": [10, 20] // 画布上的坐标
    }
  ],
  "connections": [
    {
      "source": {"instanceId": "instance-1", "pinName": "D13"},
      "target": {"instanceId": "instance-2", "pinName": "LED_IN"}
    }
  ]
}
---
LLM API 调用逻辑与工作流
这是一个工作流，描述了 LLM 如何与用户和数据进行交互以生成完整的电路方案。

1、需求分析与元件确定
用户输入：我想做一个能控制LED灯亮度和通过蓝牙通讯的项目。
工作流：
1）LLM 接收用户问题后，首先分析功能需求，生成一个理论元件列表（例如：[主控板, 蓝牙模块, LED, 电池]）。
2）LLM 检查用户是否启用了自定义元件。如果启用，LLM 将在对话栏显示一个预览窗口，并根据自定义元件库的列表 (custom_components.json 中的 list 字段) 让用户勾选。
3）LLM 对比理论元件列表和用户勾选的自定义元件，排除重复或不兼容的项，从而确定最终需要生成的元件。

2、元件生成与整理
LLM 根据确定的元件清单，生成相应的元件 JSON 结构。
所有元件（生成的和引用的自定义元件）都将被整理到前面提到的电路原型 JSON 模板中。此时，元件的位置、朝向、引脚接线都还未确定。

3、结构化接线生成
提示词优化：为了提高 LLM 的效率，提示词将被简化。
提示词：
①系统提示词：你是一名专业的硬件工程师，擅长生成简洁、结构化的电路连接代码。你的任务是根据给定的硬件元件及其引脚，生成一个可用的连接方案。
②用户提示词：请根据以下元件清单生成一个结构化的 JSON 连接代码，仅包含元件ID、引脚名称和连接目标。
元件清单：
Arduino Uno R3: [引脚列表]
LED: [引脚列表]
光敏电阻: [引脚列表]
LLM 返回：返回一个 JSON 格式的连线数据。

4、完整原型输出与渲染
LLM 将步骤 2 的元件项目模板与步骤 3 生成的连线 JSON 合并，整理输出为一个完整的电路原型 JSON 文件。
该文件包含元件的位置、朝向以及所有引脚连接。
应用将立即读取这个 JSON 文件，并重新渲染画布，展示完整的电路系统。
---
待办事项 (TODO)
阶段一：MVP (Minimum Viable Product)
[ ] 搭建 Electron + React 开发环境。
[ ] 实现基础画布功能：格点背景、元件拖拽、放置。
[ ] 实现画布与 JSON 数据的双向同步（拖动元件更新 JSON）。
[ ] 实现元件库管理界面，并支持简单的元件保存和加载（JSON）。
[ ] 集成 LLM API，实现最基础的“功能反推硬件”对话功能。

阶段二：功能扩展
[ ] 扩展 LLM API 能力，实现电路图生成（JSON 结构）和固件代码生成。
[ ] 实现画布上的连线功能，并支持连线数据的 JSON 存储。
[ ] 实现 LLM 通过预设函数直接修改 JSON 并驱动画布渲染。

阶段三：优化与增强
[ ] 优化 UI/UX，提升用户体验。
[ ] 增加更多预设的常用硬件元件。
[ ] 实现更高级的LLM交互，如错误排查和代码优化建议。